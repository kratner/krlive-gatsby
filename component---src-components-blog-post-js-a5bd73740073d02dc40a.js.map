{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/components/Nav.js","webpack:///./src/components/layout.js","webpack:///./src/components/blog-post.js"],"names":["Header","siteTitle","style","margin","maxWidth","padding","display","justifyItems","alignItems","to","color","textDecoration","defaultProps","Nav","query","qryArtwork","render","data","allWpPost","edges","menuItems","map","menuItem","href","node","slug","title","Layout","children","Fragment","site","siteMetadata","className","z","msg","BlogPost","post","nodes","dangerouslySetInnerHTML","__html","content","alt","featuredImage","description","src","localFile","relativePath"],"mappings":"gIAIMA,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACb,gCACE,yBACEC,MAAO,CACLC,OAAQ,SACRC,SAAU,IACVC,QAAS,oBACTC,QAAS,OACTC,aAAc,gBACdC,WAAY,WAGd,4BACE,kBAAC,OAAD,CACEC,GAAG,IACHP,MAAO,CACLQ,MAAO,QACPC,eAAgB,SAGjBV,OAWXD,EAAOY,aAAe,CACpBX,UAAU,IAGGD,QCbAa,EAvBH,WACV,OACE,kBAAC,cAAD,CACEC,MAAOC,EACPC,OAAQ,SAAAC,GACN,GAAIA,EAAKC,UAAUC,MAAO,CACxB,IAAMC,EAAYH,EAAKC,UAAUC,MACjC,OACE,4BACGC,EAAUC,KAAI,SAAAC,GAAQ,OACrB,4BACE,uBAAGC,KAAMD,EAASE,KAAKC,MAAOH,EAASE,KAAKE,YAMtD,OAAO,SAQFX,EAAU,aCERY,IAzBA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACb,kBAAC,cAAD,CACEd,MAAK,aASLE,OAAQ,SAAAC,GAAI,OACV,kBAAC,IAAMY,SAAP,KACE,kBAAC,EAAD,CAAQ5B,UAAWgB,EAAKa,KAAKC,aAAaL,QAC1C,yBAAKM,UAAU,QACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,WAAWJ,U,kCCvBpC,0HAIMK,EAAI,SAAChB,EAAMiB,GACf,OAAOjB,GAAciB,GAGR,SAASC,EAAT,GAA6B,IACpCC,EADmC,EAARnB,KACfC,UAAUmB,MAAM,GAClC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAMR,SAAP,KACE,4BAAKO,EAAKV,OAEV,yBAAKY,wBAAyB,CAAEC,OAAQN,EAAEG,EAAKI,YAC/C,6BACE,yBACEC,IAAKL,EAAKM,cAAclB,KAAKmB,YAC7BC,IAAK,IAAMR,EAAKM,cAAclB,KAAKqB,UAAUC,kBAOlD,IAAMhC,EAAK","file":"component---src-components-blog-post-js-a5bd73740073d02dc40a.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\n\nconst Header = ({ siteTitle }) => (\n  <header>\n    <div\n      style={{\n        margin: \"0 auto\",\n        maxWidth: 960,\n        padding: \"1.45rem 1.0875rem\",\n        display: \"flex\",\n        justifyItems: \"space-between\",\n        alignItems: \"center\",\n      }}\n    >\n      <h1>\n        <Link\n          to=\"/\"\n          style={{\n            color: \"white\",\n            textDecoration: \"none\",\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nconst Nav = () => {\n  return (\n    <StaticQuery\n      query={qryArtwork}\n      render={data => {\n        if (data.allWpPost.edges) {\n          const menuItems = data.allWpPost.edges\n          return (\n            <ul>\n              {menuItems.map(menuItem => (\n                <li>\n                  <a href={menuItem.node.slug}>{menuItem.node.title}</a>\n                </li>\n              ))}\n            </ul>\n          )\n        }\n        return null\n      }}\n    />\n  )\n}\n\nexport default Nav\n\nexport const qryArtwork = graphql`\n  query qryArtwork {\n    allWpPost(\n      filter: {\n        categories: { nodes: { elemMatch: { slug: { eq: \"artwork\" } } } }\n      }\n    ) {\n      edges {\n        node {\n          id\n          slug\n          title\n        }\n      }\n      totalCount\n    }\n  }\n`\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport Header from \"./header\"\nimport Nav from \"./Nav\"\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <React.Fragment>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div className=\"page\">\n          <div className=\"nav\">\n            <Nav />\n          </div>\n          <div className=\"content\">{children}</div>\n        </div>\n      </React.Fragment>\n    )}\n  />\n)\n\nexport default Layout\n","import React from \"react\"\nimport Layout from \"../components/layout\"\nimport { graphql } from \"gatsby\"\n\nconst z = (data, msg) => {\n  return data ? data : msg\n}\n\nexport default function BlogPost({ data }) {\n  const post = data.allWpPost.nodes[0]\n  return (\n    <Layout>\n      <React.Fragment>\n        <h1>{post.title}</h1>\n        {/* <div id=\"#post-content\">{z(post.content)}</div> */}\n        <div dangerouslySetInnerHTML={{ __html: z(post.content) }} />\n        <div>\n          <img\n            alt={post.featuredImage.node.description}\n            src={\"/\" + post.featuredImage.node.localFile.relativePath}\n          />\n        </div>\n      </React.Fragment>\n    </Layout>\n  )\n}\nexport const query = graphql`\n  query($slug: String!) {\n    allWpPost(filter: { slug: { eq: $slug } }) {\n      nodes {\n        id\n        title\n        content\n        categories {\n          nodes {\n            link\n            id\n            name\n            uri\n          }\n        }\n        link\n        uri\n        acfLinks {\n          class\n          description\n          fieldGroupName\n          href\n          icon\n          target\n          text\n          title\n          type\n          weight\n        }\n        acfSocialLinks {\n          fieldGroupName\n          socialLinkWeight\n        }\n        acfSplashLinks {\n          fieldGroupName\n          splashLinkWeight\n          splashlinkhref\n          splashlinklinktext\n          splashlinktitle\n        }\n        slug\n        featuredImage {\n          node {\n            localFile {\n              relativePath\n              relativeDirectory\n              root\n              url\n              base\n            }\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}